From beginners-return-93097-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jul  5 12:56:34 2007
Return-Path: <beginners-return-93097-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l65GuVL9028821
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 5 Jul 2007 12:56:32 -0400
Received: (qmail 6684 invoked by uid 514); 5 Jul 2007 16:56:20 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 6675 invoked from network); 5 Jul 2007 16:56:20 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 5 Jul 2007 16:56:20 -0000
Received: (qmail 13716 invoked by uid 225); 5 Jul 2007 16:56:19 -0000
Delivered-To: beginners@perl.org
Received: (qmail 13707 invoked by alias); 5 Jul 2007 16:56:19 -0000
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of mritty@gmail.com)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Thu, 05 Jul 2007 09:56:09 -0700
Received: (qmail 6621 invoked by uid 515); 5 Jul 2007 16:56:02 -0000
To: beginners@perl.org
MBOX-Line: From news@google.com Thu Jul 05 16:56:01 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Received: (qmail 6611 invoked from network); 5 Jul 2007 16:56:01 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 5 Jul 2007 16:56:01 -0000
Received: (qmail 13449 invoked by uid 225); 5 Jul 2007 16:56:00 -0000
Delivered-To: news-moderator-perl.beginners@perl.org
Received: (qmail 13438 invoked by alias); 5 Jul 2007 16:55:59 -0000
Received-SPF: neutral (x1.develooper.com: 216.168.1.22 is neither permitted nor denied by domain of news@google.com)
Received: from trinity.supernews.net (HELO trinity.supernews.net) (216.168.1.22)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 05 Jul 2007 09:55:56 -0700
Received: from proxy.google.com ([64.233.167.4]:33765)
	by trinity.supernews.net with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.66 (FreeBSD))
	(envelope-from <news@google.com>)
	id 1I6UcR-0003fL-Uq
	for perl-beginners@moderators.isc.org; Thu, 05 Jul 2007 16:55:52 +0000
Received: from AR020007
	by proxy.google.com with ESMTP id l65GtfY7019171
	for <perl-beginners@moderators.isc.org>; Thu, 5 Jul 2007 09:55:41 -0700
Received: (from news@localhost)
	by Google Production id l65GtfFs013195
	for perl-beginners@moderators.isc.org; Thu, 5 Jul 2007 09:55:41 -0700
From: Paul Lalli <mritty@gmail.com>
Subject: Re: Snippet explanation please
Date: Thu, 05 Jul 2007 09:55:41 -0700
Organization: http://groups.google.com
Lines: 78
Message-ID: <1183654541.495420.28550@g4g2000hsf.googlegroups.com>
References: <1183646961.952903.131480@57g2000hsv.googlegroups.com>
NNTP-Posting-Host: 204.97.183.31
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
X-Trace: posting.google.com 1183654541 13194 127.0.0.1 (5 Jul 2007 16:55:41 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Thu, 5 Jul 2007 16:55:41 +0000 (UTC)
In-Reply-To: <1183646961.952903.131480@57g2000hsv.googlegroups.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.1),gzip(gfe),gzip(gfe)
X-HTTP-Via: 1.0 mndnetcachea (NetCache NetApp/6.0.5)
Complaints-To: groups-abuse@google.com
Injection-Info: g4g2000hsf.googlegroups.com; posting-host=204.97.183.31;
   posting-account=p3DCbw0AAAAc32agNMy1mXKInuw5KHP_
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Jul 5, 10:49 am, dale.schm...@offutt.af.mil (Monty) wrote:
> I'm reading "Network Programming with Perl" by Lincoln Stein, and I've
> come across a snippet of code I'mnot quite following:
>
> open (WHOFH, "who |") or die "Can't open who: $!";
>
> While (<WHOFH>) {

Please configure your mail/newsreader not to randomly capitalize
words.  There is no "While" keyword in Perl.

>     next unless /^(\S+)/;
>     $who{$1}++;
> }
>
> It's the 'next' line I'm unclear on.  I know that results: parse the
> first field from each output line of the 'who' command, but I'm
> wondering why this might have been done in this way.  It seems to me
> that the 'next' line states "get the next record unless the current
> one startes with a non-whitespace character".
>
> The UNIX 'who' command output lines always start with non-whitespace
> characters, as far as I can see.  It seems just as sensible to leave
> this line out.  Does anyone know additional value to doing this?

Well, the next command is actually doing three things at once.  First,
it's determining whether or not the current line starts with non-
whitespace characters.  Then, if it doesn't start with whitespace
characters, it skips the remainder of this iteration of the while
loop.  Finally, if it does start with whitespace characters, it's
saving those characters in $1.

The third part is obviously important.  As for the first two, I have
no idea - maybe there are some rare circumstances in which `who`
returns blanks at the start of the line?

> Also, the '$who{$1}++' lines has the same effect here as "awk '{ print
> $1 }'",

No it doesn't.  $who{$1}++ increments the value in the %who hash that
has the key $1.  `awk '{ print $1 }'` prints the first element of the
string that awk has parsed.  Perl's $1 and awk's $1 are wholly
unrelated.

> and leads me to believe that $2, $3, etc. also exist

They exist, yes.  But they're not what you think they are, any more
than Perl's $1 is what you think it is.

> but that
> doesn't seem to be the case as I've tried printing those variables.
> How does the '$1' work in this case?

$1, $2, $3, etc store the contents of the sequentially numbered
parentheses-enclosed submatches of the most recent successful pattern
match.  For example:

"hello world" =~ /(\w+) (\w+)/;
print "$1-$2\n";  #prints "hello-world"
"fooooooooo bar baz" =~ /(o{2})(o)(o+)/;
print "$1 $2 $3\n";  #prints "oo o oooooo"

Any successful pattern match will set ALL $<number> variables.  If
there are only two capturing parentheses, $1 and $2 are set to
whatever those captured submatches are, and $3 and up are set to
undef.  If there are no captured parentheses, all of $1 on up are set
to undef.

In your example, only one set of captured parentheses existed in the
pattern match, and so only $1 was set to a defined value.

Read more about regular expressions in:
perldoc perlretut
perldoc perlre
perldoc perlreref

Paul Lalli


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


